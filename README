tom-sync
========
Copy files between computers with different protocols.

Data model
----------
tom-sync versions directories.

The transfer protocol is one of the following.

* `rsync-public`
* `git-public`
* `fossil-public`
* `rsync-private`
* `fossil-private`

The remote location is a list of host-path pairs.
Here are some common remotes.

* `nsa:public/tom-sync/rsync`
* `nsa:public/tom-sync/git`
* `nsa:public/tom-sync/fossil`
* `nsa:private/tom-sync/rsync`
* `nsa:private/tom-sync/fossil`
* `github:tlevine/tom-sync`
* `gitlab:tlevine/tom-sync`

(Actually, maybe I just don't have this at all; I'm designing this
specifically for my own systems and the name is always the directory.)

On nsa the `public` directory gets served to the web, and the private
directory does not.

rsync-public
^^^^^^^^^^^^
rsync-public directories are transferred between local and remote with
`rsync --archive --exclude=.tomsync`.
I don't use `--delete` because it's too easy to lose
data by accident that way. I should really switch rsync for something
else that has some versioning.

On nsa resulting directory is served as static files from Apache.

git-public
^^^^^^^^^^
git-public directories are transferred with `git push` and `git pull`.
Use git commands if you want to do anything else.

On nsa resulting repository is checked out in a post-receive hook and
then is served as static files from Apache. The ".git" directories are
not served, though, because then bots download lots of small files and
use lots of resources.

fossil-public
^^^^^^^^^^^^^
fossil-public directories are transferred with `fossil sync`.
(Is that right?)

On nsa they are served from apache as
[CGI programs](https://www.fossil-scm.org/index.html/doc/trunk/www/server.wiki)

rsync-private
^^^^^^^^^^^^^
rsync-private directories are first encrypted at the file level.
Directory structures and file names are not encrypted; only the file
contents are encrypted. The encrypted files are stored on the server.

Here are two approaches to encrypting the files locally.

1. Put unencrypted files in an EncFS or PEFS, and synchronize the
   underlying encrypted files.
2. Encrypt individual files with GPG in a temporary directory, and
   synchronize the GPG-encrypted files.

A disadvantage of the first approach is that it is less portable and
might be more annoying to set up. In particular, I might wind up stuck
with a Linux kernel or a BSD kernel.

The only issue I see with the second approach is that it might take
longer to write. But it also might not.

fossil-private
^^^^^^^^^^^^^^^
Instead of using fossil's built-in synchronization, encrypt the fossil
repository and copy that to the

User interface
--------------
These commands are available

    tom-sync init rsync-public [name]
    tom-sync init rsync-private [name]
    tom-sync init git-public [name]
    tom-sync init fossil-public [name]
    tom-sync init fossil-private [name]
    tom-sync commit
    tom-sync push
    tom-sync fetch

The following aliases should also be set.

    alias i=tom-sync\ i
    alias j=tom-sync\ j
    alias p=tom-sync\ p
    alias f=tom-sync\ f

The `commit`, `push`, and `fetch` commands are translated to appropriate
protocol-specific commands.

The `init` command does this.

1. Use the name argument as the name if such an argument is passed;
   otherwise, default to the basename of the working directory.
2. If the project is on nsa, tom-sync reports the protocol of the project.
3. If the protocol is git-public or fossil-public or if the project is
   not on nsa, tom-sync also reports whether a project with that name is
   on github and gitlab.
4. If the project is on nsa, tom-sync asks whether you want to fetch the
   project from nsa. If you say no, tom-sync exits.
5. If the project is not on nsa but is somewhere else, tom-sync asks
   whether you want to import the project from there. If you say no,
   tom-sync exits.
6. tom-sync pushes the project to all remotes.

Protocol choices
------------------
I wound up with five transfer protocols; here is how I chose them.

I want to be able to back up, version, and maybe share any project that
I might make. I group software for this sort of thing into two
categories.

Text backups
    Software designed for small text files with short lines that are
    rewritten infrequently, accompanied with tools for inspecting and
    annotating the changes in detail (fossil, git, darcs, &c.).
Large backups
    Software designed for large arbitrarily-formatted files and with
    relatively simple tools, if any, for inspecting history
    (rsync, obnam, duplicity, &c.)

In both cases I want software with the following properties.

* The software is simple with insignificant dependencies.
* In particular, the server must have insignificant dependencies for
  receiving updates (not for serving them to the web); dependencies
  should be at least as ubiquitious as rsync.
* I should be able to revert old versions.
* I should be able to understand my backups, especially encrypted
  backups, without knowing what software created them.

For text backups I want the following features.

* Support complex branching and merging (distributed version control).
* Easily serve the repository as a website.
* Create few files. This is partly so that I can easily encrypt the
  repository. (Git's large directory is annoying to copy.)

Text backups
^^^^^^^^^^^^
The main candidates for text backups are fossil and monotone.

* Both are distributed version control softwares (DVCS).
* Both store their data in a single SQLite file.
* Both have tools for rendering pretty web pages about the repository.

I slightly preferred fossil because the documentation generally made
more sense to me and because I thought the built-in web server, wiki,
and bug tracking would be easier to run than external monotone tools.

I rejected other DVCSs on the because they store data in lots of small
files and are thus more annoying to download, encrypt, and serve.
That said, I still support git because it is very popular. I won't use
git for my personal stuff, so I don't need encrypt to it.


Large backups
^^^^^^^^^^^^^
I considered the following softwares for large backups.

* rdiff
* duplicity
* obnam
* dar

I rejected others on the following grounds.

* [Box Backup](http://www.boxbackup.org/) has a client daemon.
* File-sync software like rsync and bittorrent are inappropriate because
  they do not maintain revision history.

